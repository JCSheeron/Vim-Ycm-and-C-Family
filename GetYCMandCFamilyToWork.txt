1) Install cmake for ubuntu/linux. At the time, this was version 3.10.
    Unzip it and follow the readme (you need make installed):
    UNIX/Mac OSX/MinGW/MSYS/Cygwin
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    You need to have a C++ compiler (supporting C++11) and a ``make`` installed.
    Run the ``bootstrap`` script you find in the source directory of CMake.
    You can use the ``--help`` option to see the supported options.
    You may use the ``--prefix=<install_prefix>`` option to specify a custom
    installation directory for CMake. You can run the ``bootstrap`` script from
    within the CMake source directory or any other build directory of your
    choice. Once this has finished successfully, run ``make`` and
    ``make install``.  In summary::

     $ ./bootstrap && make && make install

2) Install clang

3) Install YCM in VIM (using Bundle)

    Install development tools and CMake:
        sudo apt-get install build-essential cmake

    Make sure you have Python headers installed:
        sudo apt-get install python-dev python3-dev

    Compiling YCM with semantic support for C-family languages:
        cd ~/.vim/bundle/YouCompleteMe
        ./install.py --clang-completer

4) Create your application

    4a) Create the CMakeLists.txt file for you application. See this git
    repository for an example

    4b) Create a build directory

    4c) Compile your application using CMake and Clang

    4d) Enable C-family Semantic Completion

        In order to perform semantic analysis such as code completion, GoTo and
        diagnostics, YouCompleteMe uses libclang. This is the library version of the 
        clang compiler, sometimes also referred to as llvm. Like any compiler, 
        libclang requires a set of compile flags in order to parse your code.
        Simply put: If libclang can't parse your code, YouCompleteMe can't provide
        semantic analysis.

        There are 2 methods which can be used to provide compile flags to libclang:

        Option 1: Use a compilation database

        The easiest way to get YCM to compile your code is to use a compilation
        database. A compilation database is usually generated by your build system
        (e.g. CMake) and contains the compiler invocation for each compilation
        unit in your project.

        For information on how to generate a compilation database, see the clang
        documentation. In short:

        If using CMake, add -DCMAKE_EXPORT_COMPILE_COMMANDS=ON when configuring
        (or add set( CMAKE_EXPORT_COMPILE_COMMANDS ON ) to CMakeLists.txt) and
        copy or symlink the generated database to the root of your project.
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        
        If using Ninja, check out the compdb tool (-t compdb) in its docs.

        If using GNU make, check out Bear.

        For other build systems, check out .ycm_extra_conf.py below.

        If no .ycm_extra_conf.py is found, and no ycm_global_ycm_extra_conf is
        configured, YouCompleteMe automatically tries to load a compilation database
        if one is found.

        YCM looks for a file named compile_commands.json in the directory of the
        opened file or in any directory above it in the hierarchy (recursively);
        when the file is found, it is loaded. YouCompleteMe performs the following
        lookups when extracting flags for a particular file:

        If the database contains an entry for the file, the flags for that file are used.

        If the file is a header file and a source file with the same root exists in
        the database, the flags for the source file are used. For example, if the
        file is /home/Test/project/src/lib/something.h and the database contains an
        entry for /home/Test/project/src/lib/something.cc, then the flags for
        /home/Test/project/src/lib/something.cc are used.

        Otherwise, if any flags have been returned from the directory containing the
        requested file, those flags are used. This heuristic is intended to provide
        potentially working flags for newly created files.

        Finally, YCM converts any relative paths in the extracted flags to absolute
        paths. This ensures that compilation can be performed from any Vim working
        directory.

        Option 2: Provide the flags manually
            See YCM documentation


